Maven Build Tool

Introduction
  Apache Maven is a software project management and comprehension tool. It is based on the concept of a
  project object model (POM), Maven can manage a project's build, reporting and documentation.
  The most powerful feature is its ability to download the project dependency libraries automatically from maven
  central repo, maven remote repo or local repo.

Pre requisites
  Java
  XML
  

Installation of Maven software
1) Download Maven software as a ZIP file using below url
http://rnaven.apache.org/download.cgi
2) Copy apache-maven-3.6.3-bin.zip it into C:\Maven drive and extract into this(C:\Maven)
directory, we will see four folders namely
C:\Maven\apache-maven-3.6.3
1) \bin ----- > It contains the batch files.
2) \conf ----> It contains the configuration files like settings.xml.
3) \lib ------ > It contains the jar files.Contents in pom.xml


All POM files require the project element and three mandatory fields: Groupld, Artifactld and version.
Root element of POM.xml is project and it has three major sub-nodes.

groupId
  This is an Id of project’s group. This is generally unique within an organization or a
  project. For example, a banking group com.company.bank has all bank related projects.
  
artifactld
  This is an Id of the project.This is generally the of the project. For example, consumer-
  banking. Along with the groupld, the artifactld defines the artifact's location within the repository.
  
version
  This is the version of the project. Along with the groupld, It is used within an artifact's
  repository to separate versions from each other. For example: com.company.bank:consumer-bankin:1g.0com.company.bank:consumer-banking:1.1.
  
Maven Repositories

  Maven Local Repository
  Maven Central Repository
  Remote Repository
  
Maven Local Repository
  The maven local repository is a local folder that is used to store all your project's dependencies (plugin
  jars and other files which are downloaded by Maven). In simple terms, when you build a Maven project,
  all dependency files will be stored in your Maven local repository.
  By default, Maven local repository is default to • m2 folder:
  1. Unix/Mac OS X – ~/. m2/ repository
  ( / Us er s/ Mi t hunReddy/ . m2/ r eposi t or y)
  2. Windows - C: \ Document s and Settings\{your- user name} \ .
  m2/ repository
  Normally, we will change the default local repository folder from default • m2 to another more meaningful
  name as follows.
  Find {M2_HOME}\conf\setting.xml, update localRepository to something else.
  <!-- localRepository
  The path to the local repository maven will use to store artifacts.
  Default: ${user.home}/.m2/repository<localRepository>/path/to/local/repo</localRepository>
  -->
  <local Repository> D:/ maven_custom_repo</local Repository>

Maven Central Repository
  The central repository is the repository provided by the Maven community. It contains a large repository of
  commonly used libraries. This repository comes into play when Maven does not find libraries in the local
  repository.
  
The central repository can be found at: http://search.maven.org/.

Remote Repository
  Enterprises usually maintain their own repositories for the libraries that are being used for the project. These
  differ from the local repository; a repository is maintained on a separate server, different from the developer's
  machine and is accessible within the organization.
  
Maven Architecture

Maven Life cycles
There are 3 life cycles in maven.

1.Default Lifecycle
  Validate It validates that the project is correct and all necessary information is available.
  Compile - It compiles the source code of the project.
  Test - Run tests using a suitable unit testing framework. Normally if they the tests requirements fails
  then the code SHOULD NOT be packaged or deployed.
  package take the compiled code and package it in its distributable format, such as a JAR, WAR, EAR....
  install :
  locally. install the package into the local repository, for use as a dependency in other projects
  deploy
  projects. copies the final package to the remote repository for sharing with other developers 
  
2,Clean Lifecycle:
  clean : remove all files generated by the previous build
  
3,Site Lifecycle
  site generate the project's site documentation

Maven Goals
To invoke a maven build you set a life cycle goal.
mvn install: Invokes validate, compile, test, package, install. mvn clean:

Invokes just clean.
mvn clean compile : Clean old builds and execute validate, compile. mvn compile install
: Invokes validate, compile, test, package, install. mvn test clean : Invokes validate,compile, test then clean.

Maven with SonarQube
  To integrate maven and SonarQube, we don’t need to create a sonar-project property’s file. It will take
  all the details from pom.xml. To generate SonarQube scanner report for maven projects need to add
  below lines in pom.xml.
            <profiles>
            <profile>
            <id>sonar</id>
            <activation><activeByDefault>true</activeByDefault>
            </activation>
            <properties>
            <sonar.host.url>http://localhost:9000/</sonar.host.url>
            <sonar-maven-plugin.version>3.3.0.603</sonar-maven-plugin.version>
            </properties>
            <build>
            <plugins>
            <plugin>
            <groupld>org.sonarsource.scanner.maven</groupld>
            <artifactld>sonar-maven-plugin</artifactld>
            <version>${sonar-maven-plugin.version}</version>
            </plugin>
            </plugins>
            </build>
            </profile>
            </profiles>
Once you add you need to trigger the below command from the project directory to which you are
generating report.
mvn sonar:sonar
(OR)
mvn clean install sonar:sonar

  In SonarQube dashboard you will find the project with the name which you mentioned in <name>Maven-Java-
  Project</name> tag and the key it will take from
  <groupld>com.mt</groupld> and <artifactld>maven-java-project</artifactld> as follows.
  com.mt: maven-java-project , and version it will take from <version>1.0</version> tag.
  Note: If we want to generate sonarqube report for all Maven projects, we have to add above lines in
  each project, pom.xml. Instead of copying in each pom.xml, just copy into settings.xml which is
  available in conf directory.
---------------------------------------------------------------------------------------
Settings.xml file may existed In two locations;
  The Maven install: ${maven.home}/conf/settings.xml
  A user's install: ${user.home}./m2/settings.xmlThe former settings.xml are also called global settings, the latter settings.xml are referred to as user
  settings. If both files exists, their contents gets merged, with the user-specific settings.xml being
  dominant.
-------------------------------------------------------------------------------------------------------------------------------
Maven with Remote Repositories
  If we want to configure nexus remote repo with Maven, need to follow the below steps.
--------------------------------------------------------------------------------------------------------------------
Remote Repository add
          <repositories>
          <repository>
          <id>comt.mt</id>
          <url>https://maven.java.net/content/repositories/public/<lurl>
          </repository>
          </repositories>
----------------------------------------------------------------------------------------------------------------------
To install the Oracle jdbc drivers :
2.1 ojdbc6.jar
  $ mvn install:install-file -Dfile={Path/to/your/ojdbc6.jar}
  -Dgroupld=com.oracle -Dartifactld=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar
  2.2 ojdbc7.jar
  $ mvn install:install-file -Dfile={Path/to/your/ojdbc7.jar}
  -Dgroupld=com.oracle -Dartifactld=ojdbc7 -Dversion=12.1.0 -Dpackaging=jar
  Full example to install a ojdb c7.jar
  Terminal
  > mvn install:install-file-Dfile=C:\\OracleJDBC\\ojdbc7.jar
  -Dgroupld=com.oracle-Dartifactld=ojdbc7 -Dversion=12.1.0 -Dpackaging=jar
  After installation, you must add below dependency in pom.xml as follows.
  <!-- ojdbc6.jar example -->
  <dependency>
  <groupld>com.oracle</groupld>
  <artifactld>ojdbc6</artifactld><version>11.2.0</version>
  </dependency>
  <!-- ojdbc7.jar example-->
  <dependency>
  <groupld>com.oracle</groupld>
  <artifactld>ojdbc7</artifact Id>
  <version>12.1.0</version>
</dependency>
-----------------------------------------------------------------------------------------------------------------------
  mvn install:install-file-DlocalRepositoryPath=repo -DcreateChecksum=true - Dpackaging=jar -
  Dfile=/Users/BhaskarReddyUJars/BluePagesJavaToolKit-3.jar - Dgroupld=com.mt -
  Dartifactld=BluePagesJavaToolKit-.3jar -Dversion=1.0
  pom.xml
  <repositories>
  <repository>
  <id>com.mt</id>
  <url>file://${project.basedir}/repo<lurl>
  <!repository>
  <!repositories>
----------------------------------------------------------------------------------------------------------------------------- -
  What is the difference between -DskipTests and -Dmaven.test.skip=true ?
  Ans)
  mvn archetype:generate -DarchetypeGroupld=org.apache.maven.archetypes - DarchetypeArtifactld=maven-
  archetype-quickstart -Dgroupld=com .mt -Dartifactld=Maven- standalone-Project -DinteractiveMode=yes
  mvn archetype:generate -DarchetypeGroupld=org.apache.maven.archetypes - DarchetypeArtifactld=maven-
  archetype-webapp -Dgroupld=com.mt -Dartifactld= Maven-Web-
  Project -DinteractiveMode=yes
  mvn eclipse:eclipse
  mvn jetty:run

Generate the Java standalone project
---------------------------------------------------------------------------------------------------------------
  mvn -B archetype:generate \
  -DarchetypeGroupld=org.apache.maven.archetypes \
  -Dgroupld=com.mt.devops.maven \
  -Dartifactld=helloworld
  References:
  http://rnaven.apache.org /settings.htrnl
  http://rnaven .apache.org/general.htrnl#available-plugins
  https://howtodoinjava.corn/rnaven /rnaven -dependency-scopes/
